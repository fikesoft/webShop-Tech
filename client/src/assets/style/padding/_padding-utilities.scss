@use 'sass:list';
@use 'sass:math';
@use 'sass:map';
@use '../breakpoints/breakpoints-variables' as *;

// Reduced padding scale (0-100px in 10px increments with 'x' suffix)
@function generate-padding-scale() {
  $scale: ();
  @for $i from 0 through 10 {
    $key: #{$i * 10}x;
    $value: #{$i * 10}px;
    $scale: map.merge(
      $scale,
      (
        $key: $value,
      )
    );
  }
  @return $scale;
}

$padding-scale: generate-padding-scale();

// Padding directions
$padding-directions: (
  'p': (
    'padding',
  ),
  'pt': (
    'padding-top',
  ),
  'pr': (
    'padding-right',
  ),
  'pb': (
    'padding-bottom',
  ),
  'pl': (
    'padding-left',
  ),
  'px': (
    'padding-left',
    'padding-right',
  ),
  'py': (
    'padding-top',
    'padding-bottom',
  ),
);

// Base padding utilities
@each $dir, $properties in $padding-directions {
  @each $size, $value in $padding-scale {
    .#{$dir}-#{$size} {
      @each $prop in $properties {
        #{$prop}: $value !important;
      }
    }
  }

  // Double-value padding (only for shorthand 'p')
  @if $dir == 'p' {
    @each $v, $v-val in $padding-scale {
      @each $h, $h-val in $padding-scale {
        .#{$dir}-#{$v}-#{$h} {
          padding: $v-val $h-val !important;
        }
      }
    }
  }
}

// Responsive padding utilities
$breakpoints: (
  'sm': $sm,
  'md': $md,
  'lg': $lg,
  'xl': $xl,
  'xxl': $xxl,
);

@each $breakpoint, $size in $breakpoints {
  @media (min-width: $size) {
    @each $dir, $properties in $padding-directions {
      @each $size, $value in $padding-scale {
        .#{$dir}-#{$breakpoint}-#{$size} {
          @each $prop in $properties {
            #{$prop}: $value !important;
          }
        }
      }

      // Responsive double-value padding
      @if $dir == 'p' {
        @each $v, $v-val in $padding-scale {
          @each $h, $h-val in $padding-scale {
            .#{$dir}-#{$breakpoint}-#{$v}-#{$h} {
              padding: $v-val $h-val !important;
            }
          }
        }
      }
    }
  }
}
